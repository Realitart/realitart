import 'package:flutter/material.dart';
import 'package:realitart/core/framework/colors.dart';
import 'package:realitart/core/framework/globals.dart';
import 'package:realitart/presentation/widgets/bottomsheets/filter_bottomsheet.dart';
import 'package:realitart/presentation/widgets/cards/museos_card.dart';
import 'package:realitart/presentation/widgets/screenBase/screen_base.dart';
import 'package:realitart/presentation/widgets/searchBar/searchBar.dart';

class MuseumsScreen extends StatefulWidget {
  const MuseumsScreen({Key? key}) : super(key: key);

  @override
  State<MuseumsScreen> createState() => _MuseumsScreenState();
}

class _MuseumsScreenState extends State<MuseumsScreen> {
  List<MuseoCard> lstMuseos = [];
  List<MuseoCard> filteredMuseos = [];
  List<String> selectFilters = [];
  List<String> filterNames = [];

  TextEditingController _searchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    lstMuseos = generateMuseos();
    filteredMuseos = List.from(lstMuseos);
    for (var i = 0; i < 10; i++) {
      filterNames.add(generateRandomLoremIpsum(10));
    }
  }

  // Autogenerated list
  List<MuseoCard> generateMuseos() {
    List<MuseoCard> lstMuseos = [];
    for (var i = 0; i < 10; i++) {
      lstMuseos.add(MuseoCard(
        imgPath: generateRandomImgUrl(),
        title: generateRandomLoremIpsum(45),
        description: generateRandomLoremIpsum(10),
      ));
    }
    return lstMuseos;
  }

  @override
  Widget build(BuildContext context) {
    return ScreenBase(
      body: Column(
        children: [
          Container(
            width: MediaQuery.of(context).size.width * 0.9,
            margin: const EdgeInsets.symmetric(vertical: 10),
            child: const Text('Museos',
                textAlign: TextAlign.left,
                style: TextStyle(
                    fontFamily: 'Gilroy_bold', color: black1, fontSize: 28)),
          ),
          SearchBar(
            searchController: _searchController,
            onSearchTextChanged: _onSearchTextChanged,
            onFilterPressed: _onFilterPressed,
            filtersLen: selectFilters.length.toString(),
          ),
          nuevosMuseos(context),
          const SizedBox(
            height: 20,
          ),
        ],
      ),
    );
  }

  Widget nuevosMuseos(BuildContext context) {
    return SizedBox(
      width: MediaQuery.of(context).size.width * 0.9,
      height: MediaQuery.of(context).size.height * 0.8,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SizedBox(
            height: 10,
          ),
          SizedBox(
            height: MediaQuery.of(context).size.height * 0.73,
            child: ListView.builder(
              scrollDirection: Axis.vertical,
              itemCount: filteredMuseos.length,
              shrinkWrap: true,
              itemBuilder: (context, index) {
                return filteredMuseos[index];
              },
            ),
          ),
        ],
      ),
    );
  }

  void _onSearchTextChanged(String searchText) {
    setState(() {
      filteredMuseos = lstMuseos.where((museo) {
        final title = museo.title.toLowerCase();
        final description = museo.description.toLowerCase();
        final searchLower = searchText.toLowerCase();
        return title.contains(searchLower) || description.contains(searchLower);
      }).toList();
    });
  }

  void _onFilterPressed() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      clipBehavior: Clip.antiAliasWithSaveLayer,
      shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(top: Radius.circular(25.0))),
      builder: (BuildContext context) {
        return FilterBottomSheet(
          filterNames: filterNames,
          selectedFilters: selectFilters,
          onFiltersSelected: (List<String> selectedFilters) {
            //guarda selectedFilters
            setState(() {
              selectFilters = selectedFilters;
            });
            print('selectedFilters: $selectedFilters'
                ' - selectFilters: $selectFilters');
            Navigator.pop(context);
          },
        );
      },
    );
  }
}
