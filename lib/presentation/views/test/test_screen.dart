import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:pinput/pinput.dart';
import 'package:realitart/core/framework/colors.dart';
import 'package:realitart/core/framework/globals.dart';
import 'package:realitart/data/models/test_by_user_model.dart';
import 'package:realitart/data/models/test_model.dart';
import 'package:realitart/data/models/user_model.dart';
import 'package:realitart/data/services/test_service.dart';
import 'package:realitart/presentation/views/test/test_detail.dart';
import 'package:realitart/presentation/widgets/buttons.dart';
import 'package:realitart/presentation/widgets/cards/test_card.dart';
import 'package:realitart/presentation/widgets/dialogs/erro_alert_dialog.dart';
import 'package:realitart/presentation/widgets/dialogs/info_dialog.dart';
import 'package:realitart/presentation/widgets/screenBase/screen_base.dart';

class TestScreen extends StatefulWidget {
  const TestScreen({Key? key}) : super(key: key);

  @override
  State<TestScreen> createState() => _MuseumsScreenState();
}

class _MuseumsScreenState extends State<TestScreen> {
  List<TestCard> lstTests = [];
  bool? isStudent = true;
  bool loadingData = true;

  getUserType() async {
    String userData = await getPreference('user');
    var userJson = json.decode(userData);
    UserModel user = UserModel.fromJson(userJson);
    setState(() {
      isStudent = user.idUserType == 3;
    });
    if (user.idUserType == 3) {
      getTestHist();
    }
  }

  getTestHist() {
    setState(() {
      loadingData = true;
    });
    TestService().getTestByUser().then((value) {
      List<TestByUserModel> lstTest = value.cast<TestByUserModel>();
      List<TestCard> lstCards = [];
      for (var item in lstTest) {
        lstCards.add(TestCard(
          qualification: item.score.toString(),
          title: item.name,
          date: item.created.toString(),
        ));
      }
      setState(() {
        lstTests = lstCards;
        loadingData = false;
      });
    });
  }

  @override
  void initState() {
    super.initState();
    getUserType();
  }

  // Autogenerated list
  List<TestCard> generateTests() {
    List<TestCard> lstTests = [];
    for (var i = 0; i < 5; i++) {
      lstTests.add(TestCard(
        qualification: '13,00',
        title: generateRandomLoremIpsum(45),
        date: '12/12/2023',
      ));
    }
    return lstTests;
  }

  Future<TestModel?> getTest(String code) async {
    return TestService().getTestByCode(code);
  }

  @override
  Widget build(BuildContext context) {
    return ScreenBase(
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 20.0),
        child: Column(
          children: [
            Container(
              width: MediaQuery.of(context).size.width * 0.9,
              margin: const EdgeInsets.symmetric(vertical: 10),
              child: const Text('Test',
                  textAlign: TextAlign.left,
                  style: TextStyle(
                      fontFamily: 'Gilroy_bold', color: black1, fontSize: 28)),
            ),
            AppButton(
              label: isStudent ?? true ? 'ingresar a test' : 'Crear test',
              txtSize: 18,
              textColor: Colors.white,
              colorDefault: const Color(0xFF302DA6),
              height: MediaQuery.of(context).size.height * 0.07,
              width: MediaQuery.of(context).size.width * 0.75,
              radius: 100,
              onPressed: () {
                showDialog(
                    context: context,
                    builder: ((BuildContext context) {
                      return InfoDialog(
                          title: 'Introduce el código',
                          message: 'Pide el código a tu profesora',
                          content: codeForm(),
                          onPressed: () {
                            getTest(pinController.text).then((value) {
                              if (value != null) {
                                Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                        builder: (context) =>
                                            TestDetailScreen(test: value)));
                              } else {
                                Navigator.pop(context);
                                showDialog(
                                        context: context,
                                        builder: ((context) => ErrorAlertDialog(
                                              errorMessage: 'Código inválido',
                                              func_back: () =>
                                                  Navigator.pop(context),
                                            )))
                                    .then((value) => pinController.clear);
                              }
                            });
                          });
                    }));
              },
            ),
            Container(
              width: MediaQuery.of(context).size.width * 0.9,
              margin: const EdgeInsets.symmetric(vertical: 10),
              child: Text(
                  isStudent ?? true ? 'Mis calificaciones' : 'Historial',
                  textAlign: TextAlign.left,
                  style: const TextStyle(
                      fontFamily: 'Gilroy_medium',
                      color: black1,
                      fontSize: 18)),
            ),
            historialTests(context),
            const SizedBox(
              height: 20,
            ),
          ],
        ),
      ),
    );
  }

  final formKey = GlobalKey<FormState>();
  bool pinFail = false;
  final pinController = TextEditingController();
  final focusNode = FocusNode();
  Widget codeForm() {
    var focusedBorderColor = const Color(0xFF302DA6);
    const fillColor = Color.fromRGBO(243, 246, 249, 0);
    const borderColor = const Color(0xFF302DA6);

    final defaultPinTheme = PinTheme(
      width: 56,
      height: 56,
      textStyle: const TextStyle(
        fontFamily: 'letra_Telefonica_regular',
        fontSize: 18,
      ),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(19),
        border: Border.all(color: borderColor),
      ),
    );
    return Pinput(
      length: 4,
      controller: pinController,
      focusNode: focusNode,
      closeKeyboardWhenCompleted: true,
      defaultPinTheme: defaultPinTheme,
      hapticFeedbackType: HapticFeedbackType.lightImpact,
      forceErrorState: pinFail,
      errorText: 'Código inválido',
      errorTextStyle: const TextStyle(
        fontFamily: 'letra_Telefonica_bold',
        fontSize: 16,
        color: Colors.red,
      ),
      onChanged: (value) {
        debugPrint('onChanged: $value');
      },
      cursor: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          Container(
            margin: const EdgeInsets.only(bottom: 9),
            width: 22,
            height: 1,
            color: focusedBorderColor,
          ),
        ],
      ),
      focusedPinTheme: defaultPinTheme.copyWith(
        decoration: defaultPinTheme.decoration!.copyWith(
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: focusedBorderColor),
        ),
      ),
      submittedPinTheme: defaultPinTheme.copyWith(
        decoration: defaultPinTheme.decoration!.copyWith(
          color: fillColor,
          borderRadius: BorderRadius.circular(19),
          border: Border.all(color: focusedBorderColor),
        ),
      ),
      errorPinTheme: defaultPinTheme.copyBorderWith(
        border: Border.all(color: Colors.redAccent),
      ),
    );
  }

  Widget historialTests(BuildContext context) {
    return SizedBox(
      width: MediaQuery.of(context).size.width * 0.9,
      height: MediaQuery.of(context).size.height * 0.8,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SizedBox(
            height: 10,
          ),
          SizedBox(
            height: MediaQuery.of(context).size.height * 0.73,
            child: loadingData
                ? const Center(child: CircularProgressIndicator())
                : lstTests.isEmpty
                    ? const Center(
                        child: Text('Aún no tienes calificaciones',
                            textAlign: TextAlign.left,
                            style: TextStyle(
                                fontFamily: 'Gilroy_bold',
                                color: black1,
                                fontSize: 18)))
                    : ListView.builder(
                        scrollDirection: Axis.vertical,
                        itemCount: lstTests.length,
                        shrinkWrap: true,
                        itemBuilder: (context, index) {
                          return lstTests[index];
                        },
                      ),
          ),
        ],
      ),
    );
  }
}
